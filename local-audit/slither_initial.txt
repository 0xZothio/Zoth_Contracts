λ  zoth_contracts test ✓ slither .                        
'npx hardhat clean' running (wd: /Users/family/Desktop/Zoth/zoth_contracts)
'npx hardhat clean --global' running (wd: /Users/family/Desktop/Zoth/zoth_contracts)
'npx hardhat compile --force' running (wd: /Users/family/Desktop/Zoth/zoth_contracts)
INFO:Detectors:
IERC20 is re-used:
	- IERC20 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#9-78)
	- IERC20 (contracts/IERC20.sol#4-33)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#name-reused
INFO:Detectors:
ZothTestLP._owners (contracts/ZothTestLP.sol#27) shadows:
	- ERC721._owners (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#30)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variable-shadowing
INFO:Detectors:
ZothTestLP.yieldClaim(uint256) (contracts/ZothTestLP.sol#381-436) ignores return value by usdc.transfer(msg.sender,unlockedYield * 10 ** 6) (contracts/ZothTestLP.sol#435)
ZothTestLP.withdraw(uint256) (contracts/ZothTestLP.sol#474-491) ignores return value by usdc.transfer(msg.sender,_amountToTransfer * 10 ** 6) (contracts/ZothTestLP.sol#490)
ZothTestLP._transfer(uint256,address) (contracts/ZothTestLP.sol#500-504) ignores return value by usdc.transfer(_receiver,_amount * 10 ** 6) (contracts/ZothTestLP.sol#503)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#116)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#120)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#121)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#122)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#124)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#101)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#125)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#104)
	- result = prod0 * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#131)
ZothTestLP.yieldClaimDetails(uint256) (contracts/ZothTestLP.sol#287-359) performs a multiplication on the result of a division:
	- timeInterval = (_userEndTime - _userStartTime) / freq (contracts/ZothTestLP.sol#312)
	- lastTransferTime = _userStartTime + _cyclesClaimed * timeInterval (contracts/ZothTestLP.sol#333-335)
ZothTestLP.yieldClaimDetails(uint256) (contracts/ZothTestLP.sol#287-359) performs a multiplication on the result of a division:
	- cyclesElapsed = elapsedTime / timeInterval (contracts/ZothTestLP.sol#319)
	- totalYield = ((_userEndTime - _userStartTime) * reward * balance) / (31536000 * 100) (contracts/ZothTestLP.sol#326-328)
	- unlockedYield = (cyclesElapsed * totalYield) / freq (contracts/ZothTestLP.sol#345)
ZothTestLP.yieldClaimDetails(uint256) (contracts/ZothTestLP.sol#287-359) performs a multiplication on the result of a division:
	- timeInterval = (_userEndTime - _userStartTime) / freq (contracts/ZothTestLP.sol#312)
	- timeLeft = cyclesLeft * timeInterval (contracts/ZothTestLP.sol#349)
ZothTestLP.yieldClaim(uint256) (contracts/ZothTestLP.sol#381-436) performs a multiplication on the result of a division:
	- timeInterval = (_userEndTime - _userStartTime) / freq (contracts/ZothTestLP.sol#402)
	- lastTransferTime = _userStartTime + (cyclesClaimed[msg.sender][_depositNumber] * timeInterval) (contracts/ZothTestLP.sol#420-421)
ZothTestLP.yieldClaim(uint256) (contracts/ZothTestLP.sol#381-436) performs a multiplication on the result of a division:
	- cyclesElapsed = elapsedTime / timeInterval (contracts/ZothTestLP.sol#408)
	- totalYield = ((_userEndTime - _userStartTime) * reward * balance) / (31536000 * 100) (contracts/ZothTestLP.sol#415-417)
	- unlockedYield = (cyclesElapsed * totalYield) / freq (contracts/ZothTestLP.sol#431)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
Reentrancy in ZothTestLP.deposit(uint256,uint256) (contracts/ZothTestLP.sol#200-276):
	External calls:
	- require(bool,string)(usdc.transferFrom(msg.sender,address(this),amount * 10 ** 6),[deposit(uint256 amount,uint256 _tenureOption)] : Transfer Check : Transfer failed) (contracts/ZothTestLP.sol#216-219)
	State variables written after the call(s):
	- _mint(msg.sender,newTokenId) (contracts/ZothTestLP.sol#241)
		- _balances[to] += 1 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#278)
	- _mint(msg.sender,newTokenId) (contracts/ZothTestLP.sol#241)
		- _owners[tokenId] = to (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#281)
	- _setTokenURI(newTokenId,https://gateway.pinata.cloud/ipfs/QmZYPhDWWjK3QDxiZJuRwhyAaFYhS1mx8x5uNZfhRnPLEh) (contracts/ZothTestLP.sol#245-248)
		- _tokenURIs[tokenId] = _tokenURI (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#57)
	- _setTokenURI(newTokenId,https://gateway.pinata.cloud/ipfs/QmPV668ZHNhKVxAiTbh3etZYhqaq4jfi8UZoeMjydQZvjF) (contracts/ZothTestLP.sol#251-254)
		- _tokenURIs[tokenId] = _tokenURI (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#57)
	- _setTokenURI(newTokenId,https://gateway.pinata.cloud/ipfs/QmZz39biRbQ4ADgiLyUhc2yTerwRyB43Rj1ddnD6jfK9KS) (contracts/ZothTestLP.sol#257-260)
		- _tokenURIs[tokenId] = _tokenURI (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#57)
	- _setTokenURI(newTokenId,https://gateway.pinata.cloud/ipfs/QmfJJo8DGWAVUEDAJvZMySWoZ1SDVJ8vEds9h2TJ5FKTHv) (contracts/ZothTestLP.sol#263-266)
		- _tokenURIs[tokenId] = _tokenURI (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#57)
	- _setTokenURI(newTokenId,https://gateway.pinata.cloud/ipfs/QmQcAaVr54LkSDZoqTxk6TRSnwMHD2jTX6t8VEenWeyvPd) (contracts/ZothTestLP.sol#269-272)
		- _tokenURIs[tokenId] = _tokenURI (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#57)
	- balances[msg.sender] += amount (contracts/ZothTestLP.sol#237)
	- stakingBalance[msg.sender] += amount (contracts/ZothTestLP.sol#236)
	- totalUserDeposits[msg.sender] ++ (contracts/ZothTestLP.sol#231)
	- userDepositAmount[msg.sender][totalUserDeposits[msg.sender]] = amount (contracts/ZothTestLP.sol#234)
	- userEndTime[msg.sender][totalUserDeposits[msg.sender]] = endLend (contracts/ZothTestLP.sol#233)
	- userStartTime[msg.sender][totalUserDeposits[msg.sender]] = startLend (contracts/ZothTestLP.sol#232)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
Reentrancy in ZothTestLP.deposit(uint256,uint256) (contracts/ZothTestLP.sol#200-276):
	External calls:
	- require(bool,string)(usdc.transferFrom(msg.sender,address(this),amount * 10 ** 6),[deposit(uint256 amount,uint256 _tenureOption)] : Transfer Check : Transfer failed) (contracts/ZothTestLP.sol#216-219)
	Event emitted after the call(s):
	- MetadataUpdate(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#59)
		- _setTokenURI(newTokenId,https://gateway.pinata.cloud/ipfs/QmZYPhDWWjK3QDxiZJuRwhyAaFYhS1mx8x5uNZfhRnPLEh) (contracts/ZothTestLP.sol#245-248)
	- MetadataUpdate(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#59)
		- _setTokenURI(newTokenId,https://gateway.pinata.cloud/ipfs/QmfJJo8DGWAVUEDAJvZMySWoZ1SDVJ8vEds9h2TJ5FKTHv) (contracts/ZothTestLP.sol#263-266)
	- MetadataUpdate(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#59)
		- _setTokenURI(newTokenId,https://gateway.pinata.cloud/ipfs/QmPV668ZHNhKVxAiTbh3etZYhqaq4jfi8UZoeMjydQZvjF) (contracts/ZothTestLP.sol#251-254)
	- MetadataUpdate(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#59)
		- _setTokenURI(newTokenId,https://gateway.pinata.cloud/ipfs/QmZz39biRbQ4ADgiLyUhc2yTerwRyB43Rj1ddnD6jfK9KS) (contracts/ZothTestLP.sol#257-260)
	- MetadataUpdate(tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#59)
		- _setTokenURI(newTokenId,https://gateway.pinata.cloud/ipfs/QmQcAaVr54LkSDZoqTxk6TRSnwMHD2jTX6t8VEenWeyvPd) (contracts/ZothTestLP.sol#269-272)
	- Transfer(address(0),to,tokenId) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#283)
		- _mint(msg.sender,newTokenId) (contracts/ZothTestLP.sol#241)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
ZothTestLP.yieldClaimDetails(uint256) (contracts/ZothTestLP.sol#287-359) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > _userStartTime,[yieldClaimDetails(uint256 _depositNumber)] : Cooldown check : Your deposit is still in cooldown) (contracts/ZothTestLP.sol#300-303)
	- require(bool,string)(elapsedTime > 0,[yieldClaimDetails(uint256 _depositNumber)] : Elapsed Time check : elapsed time must be greater than 0) (contracts/ZothTestLP.sol#307-310)
	- require(bool,string)(cyclesElapsed <= freq,[yieldClaimDetails(uint256 _depositNumber)] : Cycles Elapsed check : maximum frequency reached) (contracts/ZothTestLP.sol#321-324)
	- cyclesElapsed > 0 (contracts/ZothTestLP.sol#332)
	- block.timestamp < lastTransferTime (contracts/ZothTestLP.sol#337)
	- require(bool,string)(block.timestamp >= nextTransferTime,[yieldClaimDetails(uint256 _depositNumber)] : Last Transfer check : not enough time has passed since last transfer) (contracts/ZothTestLP.sol#340-343)
ZothTestLP.yieldClaim(uint256) (contracts/ZothTestLP.sol#381-436) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp > _userStartTime,[yieldClaim(uint256 _depositNumber)] : Cooldown check : Your deposit is still in cooldown) (contracts/ZothTestLP.sol#391-394)
	- require(bool,string)(elapsedTime > 0,[yieldClaim(uint256 _depositNumber)] : Elapsed Time check : elapsed time must be greater than 0) (contracts/ZothTestLP.sol#397-400)
	- require(bool,string)(cyclesElapsed <= freq,[yieldClaim(uint256 _depositNumber)] : Cycles Elapsed check : maximum frequency reached) (contracts/ZothTestLP.sol#409-412)
	- cyclesElapsed > 0 (contracts/ZothTestLP.sol#419)
	- block.timestamp < lastTransferTime (contracts/ZothTestLP.sol#423)
	- require(bool,string)(block.timestamp >= nextTransferTime,[yieldClaim(uint256 _depositNumber)] : Last Transfer check : not enough time has passed since last transfer) (contracts/ZothTestLP.sol#426-429)
ZothTestLP.withdraw(uint256) (contracts/ZothTestLP.sol#474-491) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp >= userEndTime[msg.sender][_depositNumber],[withdraw(uint256 _depositNumber)] : Loan Tenure is not over) (contracts/ZothTestLP.sol#479-482)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
ERC721._checkOnERC721Received(address,address,uint256,bytes) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#399-421) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#413-415)
Address._revert(bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#231-243) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Address.sol#236-239)
Strings.toString(uint256) (node_modules/@openzeppelin/contracts/utils/Strings.sol#19-39) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#25-27)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#31-33)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-134) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#62-66)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#85-92)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#99-108)
console._sendLogPayload(bytes) (node_modules/hardhat/console.sol#7-13) uses assembly
	- INLINE ASM (node_modules/hardhat/console.sol#10-12)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['>=0.4.22<0.9.0', '^0.8.0', '^0.8.1', '^0.8.5', '^0.8.9']
	- >=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/interfaces/IERC4906.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/interfaces/IERC721.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)
	- ^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol#4)
	- ^0.8.0 (contracts/IERC20.sol#2)
	- ^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
	- ^0.8.5 (contracts/ZothTestLP.sol#2)
	- ^0.8.9 (contracts/Roles.sol#2)
	- ^0.8.9 (contracts/TestUSDC.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/AccessControl.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/access/IAccessControl.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/interfaces/IERC165.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/interfaces/IERC4906.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/interfaces/IERC721.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4) allows old versions
Pragma version^0.8.1 (node_modules/@openzeppelin/contracts/utils/Address.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Context.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Counters.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4) allows old versions
Pragma version^0.8.0 (node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol#4) allows old versions
Pragma version^0.8.0 (contracts/IERC20.sol#2) allows old versions
Pragma version^0.8.9 (contracts/Roles.sol#2) allows old versions
Pragma version^0.8.9 (contracts/TestUSDC.sol#2) allows old versions
Pragma version^0.8.5 (contracts/ZothTestLP.sol#2) allows old versions
Pragma version>=0.4.22<0.9.0 (node_modules/hardhat/console.sol#2) is too complex
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Address.sendValue(address,uint256) (node_modules/@openzeppelin/contracts/utils/Address.sol#64-69):
	- (success) = recipient.call{value: amount}() (node_modules/@openzeppelin/contracts/utils/Address.sol#67)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#128-137):
	- (success,returndata) = target.call{value: value}(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#135)
Low level call in Address.functionStaticCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#155-162):
	- (success,returndata) = target.staticcall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#160)
Low level call in Address.functionDelegateCall(address,bytes,string) (node_modules/@openzeppelin/contracts/utils/Address.sol#180-187):
	- (success,returndata) = target.delegatecall(data) (node_modules/@openzeppelin/contracts/utils/Address.sol#185)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function ERC721.__unsafe_increaseBalance(address,uint256) (node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#463-465) is not in mixedCase
Parameter ZothTestLP.setContractVariables(uint256,uint256,uint256,uint16,uint256,uint256,uint256)._tenure1 (contracts/ZothTestLP.sol#123) is not in mixedCase
Parameter ZothTestLP.setContractVariables(uint256,uint256,uint256,uint16,uint256,uint256,uint256)._tenure2 (contracts/ZothTestLP.sol#124) is not in mixedCase
Parameter ZothTestLP.setContractVariables(uint256,uint256,uint256,uint16,uint256,uint256,uint256)._tenure3 (contracts/ZothTestLP.sol#125) is not in mixedCase
Parameter ZothTestLP.setContractVariables(uint256,uint256,uint256,uint16,uint256,uint256,uint256)._reward (contracts/ZothTestLP.sol#126) is not in mixedCase
Parameter ZothTestLP.setContractVariables(uint256,uint256,uint256,uint16,uint256,uint256,uint256)._freq (contracts/ZothTestLP.sol#127) is not in mixedCase
Parameter ZothTestLP.setContractVariables(uint256,uint256,uint256,uint16,uint256,uint256,uint256)._poolId (contracts/ZothTestLP.sol#128) is not in mixedCase
Parameter ZothTestLP.setContractVariables(uint256,uint256,uint256,uint16,uint256,uint256,uint256)._coolDownPeriod (contracts/ZothTestLP.sol#129) is not in mixedCase
Parameter ZothTestLP.addWhitelistAddress(address)._address (contracts/ZothTestLP.sol#170) is not in mixedCase
Parameter ZothTestLP.addVerifierRole(address)._address (contracts/ZothTestLP.sol#178) is not in mixedCase
Parameter ZothTestLP.removeWhitelistAddress(address)._address (contracts/ZothTestLP.sol#186) is not in mixedCase
Parameter ZothTestLP.deposit(uint256,uint256)._tenureOption (contracts/ZothTestLP.sol#202) is not in mixedCase
Parameter ZothTestLP.yieldClaimDetails(uint256)._depositNumber (contracts/ZothTestLP.sol#288) is not in mixedCase
Parameter ZothTestLP.yieldClaim(uint256)._depositNumber (contracts/ZothTestLP.sol#381) is not in mixedCase
Parameter ZothTestLP.getDepositDetails(uint256)._depositNumber (contracts/ZothTestLP.sol#450) is not in mixedCase
Parameter ZothTestLP.withdraw(uint256)._depositNumber (contracts/ZothTestLP.sol#474) is not in mixedCase
Function ZothTestLP._transfer(uint256,address) (contracts/ZothTestLP.sol#500-504) is not in mixedCase
Parameter ZothTestLP._transfer(uint256,address)._amount (contracts/ZothTestLP.sol#500) is not in mixedCase
Parameter ZothTestLP._transfer(uint256,address)._receiver (contracts/ZothTestLP.sol#500) is not in mixedCase
Contract console (node_modules/hardhat/console.sol#4-1531) is not in CapWords
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
TestUSDC.constructor() (contracts/TestUSDC.sol#10-14) uses literals with too many digits:
	- _mint(msg.sender,10000000000 * 10 ** 6) (contracts/TestUSDC.sol#11)
ZothTestLP.deposit(uint256,uint256) (contracts/ZothTestLP.sol#200-276) uses literals with too many digits:
	- amount > 50000 && amount <= 100000 (contracts/ZothTestLP.sol#261)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
ZothTestLP.owner (contracts/ZothTestLP.sol#22) should be immutable 
ZothTestLP.usdc (contracts/ZothTestLP.sol#21) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:. analyzed (24 contracts with 88 detectors), 83 result(s) found
